/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaticket_hectorflores;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author hecto
 */
public class login extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    public login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        confirmar = new javax.swing.JButton();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Nombre de usuario:");

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Contrase√±a:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Pagina de Log In");

        confirmar.setText("Confirmar");
        confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmar)
                    .addComponent(jLabel3)
                    .addComponent(salir))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salir)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static ArrayList <usuario> usuarios = new ArrayList<>(); //Variable global que va a servir de base de datos para los usuarios y passwords registrados
    static ArrayList <admin> admins = new ArrayList<>(); //Variable global que guarda admins
    static ArrayList <contenidos> contenidos = new ArrayList<>(); //Variable global que guarda administradores de contenidos

    public static void setUsuarios(ArrayList<usuario> usuarios) {
        login.usuarios = usuarios;
    }

    
    //Recursiva 1: Recorre el arraylist para buscar y autenticas un usuario con el username y password correctos
    private boolean autenticar(ArrayList <usuario> usuarios, String objetivo, String contra_objetivo, int pos){
        if (pos < usuarios.size()){
            if ((usuarios.get(pos).getUsername()).equals(objetivo)){
                if ((usuarios.get(pos).getPassword()).equals(contra_objetivo)){
                    return true;
                } else {
                    return false;
                }
            } else {
                return autenticar(usuarios, objetivo, contra_objetivo, pos + 1);
            }
        } else {
            return false;
        }
    }
    
    
    public boolean autenticar(String objetivo, String contra_objetivo){//Simplifica Autenticar
        return autenticar(usuarios, objetivo, contra_objetivo, 0);
    }
    
    //Recursiva que retorna la posicion del ussuario
    private int posUsuario(ArrayList <usuario> usuarios, String objetivo, String contra_objetivo, int pos){
        if (pos < usuarios.size()){
            if ((usuarios.get(pos).getUsername()).equals(objetivo)){
                if ((usuarios.get(pos).getPassword()).equals(contra_objetivo)){
                    return pos;
                } else {
                    return posUsuario(usuarios, objetivo, contra_objetivo, pos + 1);
                }
            } else {
                return posUsuario(usuarios, objetivo, contra_objetivo, pos + 1);
            }
        } else {
            return -1;
        }
    }
    
    //Simplifica la recursiva arriba definida
    public int posUsuario(String objetivo, String contra_objetivo){
        return posUsuario(usuarios, objetivo, contra_objetivo, 0);
    }
    
    //Recursiva que encuentra la posicion de un evento especificado en una lista de eventos de un administrados de contenidos
    private int posContenido(ArrayList <contenidos> usuarios, String objetivo, String contra_objetivo, int pos){
        if (pos < usuarios.size()){
            if ((usuarios.get(pos).getUsername()).equals(objetivo)){
                if ((usuarios.get(pos).getPassword()).equals(contra_objetivo)){
                    return pos;
                } else {
                    return posContenido(usuarios, objetivo, contra_objetivo, pos + 1);
                }
            } else {
                return posContenido(usuarios, objetivo, contra_objetivo, pos + 1);
            }
        } else {
            return -1;
        }
    }
    
    //Simplifica laanterior
    public int posContenido(String objetivo, String contra_objetivo){
        return posContenido(contenidos, objetivo, contra_objetivo, 0);
    }
    
    //Recursiva que encuentra la posicion de un evento especificado en una lista de eventos de un administrador
    private int posAdmin(ArrayList <admin> usuarios, String objetivo, String contra_objetivo, int pos){
        if (pos < usuarios.size()){
            if ((usuarios.get(pos).getUsername()).equals(objetivo)){
                if ((usuarios.get(pos).getPassword()).equals(contra_objetivo)){
                    return pos;
                } else {
                    return posAdmin(usuarios, objetivo, contra_objetivo, pos + 1);
                }
            } else {
                return posAdmin(usuarios, objetivo, contra_objetivo, pos + 1);
            }
        } else {
            return -1;
        }
    }
    
    //Simplifica la anterior
    public int posAdmin(String objetivo, String contra_objetivo){
        return posAdmin(admins, objetivo, contra_objetivo, 0);
    }
    
    
    static String loggedInUserType;//Util para guardar el tipo de usuario
    static usuario loggedInUser;//El usuario logged in
    //Loggged user pero casteado (downcast)
    static admin adminUser;
    static contenidos contentUser;
    static limitado limitedUser;
    
    
    private void confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarActionPerformed

        String user_ingresado = username.getText();
        String pass_ingresada = (String)String.valueOf(password.getPassword());
        
        if (autenticar(user_ingresado, pass_ingresada)){
            //Muestra el  menu principal
            menuPrincipal menu = new menuPrincipal();
            menu.setVisible(true);
            menu.setLocationRelativeTo(null);
            
            //Establece el logged in user
            loggedInUser = usuarios.get(posUsuario(user_ingresado, pass_ingresada));
            
            if ((usuarios.get(posUsuario(user_ingresado, pass_ingresada))) instanceof admin){
                loggedInUserType = "admin";
                adminUser = admins.get(posAdmin(user_ingresado, pass_ingresada));
            } else if ((usuarios.get(posUsuario(user_ingresado, pass_ingresada))) instanceof contenidos){
                loggedInUserType = "contenidos";
                contentUser = contenidos.get(posContenido(user_ingresado, pass_ingresada));
            } else {
                loggedInUserType = "limitado";
                limitedUser = usuario.parseLimitado(loggedInUser);
            }
            
            setVisible(false);
            
        } else {
            JOptionPane.showMessageDialog(null, "Autenticacion fallida", "YOU SHALL NOT PASS!!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_confirmarActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton salir;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

   
}
