/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaticket_hectorflores;

import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author hecto
 */
public class administracionDeEventos extends javax.swing.JFrame {

    /**
     * Creates new form administracionDeEventos
     */
    public administracionDeEventos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();
        crear = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        ver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Menu de Eventos");

        regresar.setText("Regresar al Menu Principal");
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });

        crear.setText("Crear Evento");
        crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearActionPerformed(evt);
            }
        });

        editar.setText("Editar Evento");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        borrar.setText("Borrar Evento");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        ver.setText("Ver evento");
        ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(regresar)
                    .addComponent(jLabel1)
                    .addComponent(crear)
                    .addComponent(borrar)
                    .addComponent(editar)
                    .addComponent(ver))
                .addGap(111, 111, 111))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(borrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regresar)
                .addGap(62, 62, 62))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        //Regresa
        setVisible(false);
        
        menuPrincipal menu = new menuPrincipal();
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
    }//GEN-LAST:event_regresarActionPerformed

    //Verifica la validez de la variable tipo
    public boolean verificarValidezTipo(String incognita){
        boolean valid = true;
        
        if (incognita == null || incognita.length() != 1){
            valid = false;
        } else if ((int)incognita.charAt(0) < 48 || (int)incognita.charAt(0) > 57){
            valid = false;
        }
        
        return valid;
    }
    
    static int tipo;
    static String deporte;
    static String genero;
    
    private void crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearActionPerformed
        if (login.loggedInUser instanceof limitado){
            JOptionPane.showMessageDialog(null, "No tiene los permisos para crear un evento", "YOU SHALL NOT PASS!!!", JOptionPane.ERROR_MESSAGE);
        } else {
            String eventType_s = JOptionPane.showInputDialog("Que tipo de evento desea crear?\n1. Deportivo\n2. Musical\n3. Religioso");
        
            while (verificarValidezTipo(eventType_s) == false){
                eventType_s = JOptionPane.showInputDialog("Ingrese un tipo de evento valido\nQue tipo de evento desea crear?\n1. Deportivo\n2. Musical\n3. Religioso");
            }

            int eventType = (Integer)Integer.parseInt(eventType_s);

            while (eventType < 1 || eventType > 3){
                eventType_s = JOptionPane.showInputDialog("Ingrese u tipo de evento valido\nQue tipo de evento desea crear?\n1. Deportivo\n2. Musical\n3. Religioso");

                while (verificarValidezTipo(eventType_s) == false){
                    eventType_s = JOptionPane.showInputDialog("Ingrese un tipo de evento valido\nQue tipo de evento desea crear?\n1. Deportivo\n2. Musical\n3. Religioso");
                }
            }

            tipo = eventType;

            if (tipo == 1){
                deporte = JOptionPane.showInputDialog("Seleccione el deporte de este evento:\n-Futbol\n-Rugby\n-Tennis\n-Baseball");

                while (true){
                    if (deporte.equalsIgnoreCase("futbol") || deporte.equalsIgnoreCase("rugby") || deporte.equalsIgnoreCase("tennis") || deporte.equalsIgnoreCase("baseball")){
                        break;
                    } else {
                        deporte = JOptionPane.showInputDialog("Ingrese un deporte valido:\n-Futbol\n-Rugby\n-Tennis\n-Baseball");
                    }
                }

                deporte = deporte.toUpperCase();
            } else if (tipo == 2){
                genero = JOptionPane.showInputDialog("Aviso: La renta se incrementa por 30% por el seguro de la grama\nSeleccione el genero de este evento:\n-Pop\n-Rock\n-Rap\n-Clasica\n-Raggaeton\n-Otro");

                while (true){
                    if (genero.equalsIgnoreCase("pop") || genero.equalsIgnoreCase("rock") || genero.equalsIgnoreCase("rap") || genero.equalsIgnoreCase("clasica") || genero.equalsIgnoreCase("raggaeton") || genero.equalsIgnoreCase("otro")){
                        break;
                    } else {
                        genero = JOptionPane.showInputDialog("Ingrese un genero valido:\n-Pop\n-Rock\n-Rap\n-Clasica\n-Raggaeton\n-Otro");
                    }
                }

                genero = genero.toUpperCase();
            } else {
                JOptionPane.showMessageDialog(null, "Aviso: Se a√±aden 2,000 lps por el desgaste de grama");
            }

            setVisible(false);

            crearEvento crear = new crearEvento();
            crear.setVisible(true);
            crear.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_crearActionPerformed

    private evento buscarEvento(String codigo, ArrayList <evento> eventos, int pos){
        if (pos > eventos.size() - 1) {
            return null;
        } else if (eventos.get(pos).getCodigo().equals(codigo)){
            return eventos.get(pos);
        } else {
            return buscarEvento(codigo, eventos, pos + 1);
        }
        
    }
    
    public evento buscarEvento(String codigo){
        if (login.loggedInUser instanceof admin){
            return buscarEvento(codigo, login.adminUser.getEventos(), 0);
        } else {
            return buscarEvento(codigo, login.contentUser.getEventos(), 0);
        }
    }
    
    public boolean validarCampo(String opcion){
        boolean valid = true;
        
        for (int i = 0; i < opcion.length(); i++) {
            if ((int)opcion.charAt(i) >= 48 && (int)opcion.charAt(i) <= 57){
                valid = false;
                break;
            }
        }
        return valid;
    }
    
    public int encontrarPosCodigo(String codigo){
        int retorno = -1;
        
        for (int i = 0; i < crearEvento.codigosCreados.size(); i++) {
            if (crearEvento.codigosCreados.get(i).equals(codigo)){
                retorno = i;
            }
        }
        
        return retorno;
    }
    
    public int encontrarPosCodigoDeportivo (String codigo, ArrayList <deportivo> deportivos){
        int retorno = -1;
        
        for (int i = 0; i < deportivos.size(); i++) {
            if (deportivos.get(i).getCodigo().equals(codigo)){
                retorno = i;
            }
        }
        
        return retorno;
    }
    
    public int encontrarPosCodigoEvento (String codigo, ArrayList <evento> eventos){
        int retorno = -1;
        
        for (int i = 0; i < eventos.size(); i++) {
            if (eventos.get(i).getCodigo().equals(codigo)){
                retorno = i;
            }
        }
        
        return retorno;
    }
    
    public void editarDeportivo(String targetCode){
        int opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo que desea editar:\n1. Codigo"
                            + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                            + "\n6. Nombre del equipo 1\n7. Nombre del equipo 2\n8. Integrantes del equipo 1\n"
                            + "9. Integrantes del equipo 2"));

                    while (opcion < 1 || opcion > 9){
                        opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese un campo valido que desea editar:\n1. Codigo"
                            + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                            + "\n6. Nombre del equipo 1\n7. Nombre del equipo 2\n8. Integrantes del equipo 1\n"
                            + "9. Integrantes del equipo 2"));
                    }

                    switch (opcion){
                        case 1:
                            String newCode = JOptionPane.showInputDialog(null, "Ingrese el codigo nuevo del evento");
                            
                            if (encontrarCodigo(newCode) == -1){
                                crearEvento.codigosCreados.add(newCode);
                                
                                if (login.loggedInUserType.equals("admin")){
                                    
                                    admin logged = (admin)login.adminUser;
                                    
                                    if (adminContains(logged, targetCode)){
                                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                                        crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                                    } else {
                                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                        crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                                    }
                                } else {
                                    contenidos logged = (contenidos)login.contentUser;
                                    
                                    if (contentContains(logged, targetCode)){
                                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                                        crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                                    } else {
                                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                        crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "El codigo que desea ingrear ya existe\nIntente de nuevo");
                            }
                            
                            break;
                        case 2:
                            String newTitle = JOptionPane.showInputDialog(null, "Ingrese el titulo nuevo del evento");

                            if (login.loggedInUserType.equals("admin")){
                                    
                                admin logged = (admin)login.adminUser;

                                if (adminContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            } else {
                                contenidos logged = (contenidos)login.contentUser;

                                if (contentContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            }
                            break;
                        case 3:
                            String newDesc = JOptionPane.showInputDialog(null, "Ingrese la descripcion nueva del evento");

                            if (login.loggedInUserType.equals("admin")){
                                    
                                admin logged = (admin)login.adminUser;

                                if (adminContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            } else {
                                contenidos logged = (contenidos)login.contentUser;

                                if (contentContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            }
                            break;
                        case 4:
                            fechaNueva calendario = new fechaNueva();
                            setVisible(false);
                            calendario.setVisible(true);
                            calendario.setLocationRelativeTo(null);
                            break;
                        case 5:
                            double newRent = Double.parseDouble(JOptionPane.showInputDialog(null, "Ingrese la renta nueva del evento"));

                            if (login.loggedInUserType.equals("admin")){
                                    
                                admin logged = (admin)login.adminUser;

                                if (adminContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            } else {
                                contenidos logged = (contenidos)login.contentUser;

                                if (contentContains(logged, targetCode)){
                                    logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            }
                            break;
                        case 6:
                            String newTeamName = JOptionPane.showInputDialog(null, "Ingrese el nombre nuevo del equipo 1");

                            if (login.loggedInUserType.equals("admin")){
                                    
                                admin logged = (admin)login.adminUser;
                                deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));

                                if (adminContains(logged, targetCode)){
                                    sportEvent.setEquipo1(newTeamName);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            } else {
                                contenidos logged = (contenidos)login.contentUser;
                                deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));

                                if (contentContains(logged, targetCode)){
                                    sportEvent.setEquipo1(newTeamName);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            }
                            
                            break;
                        case 7:
                            newTeamName = JOptionPane.showInputDialog(null, "Ingrese el nombre nuevo del equipo 2");

                            if (login.loggedInUserType.equals("admin")){
                                    
                                admin logged = (admin)login.adminUser;
                                deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));

                                if (adminContains(logged, targetCode)){
                                    sportEvent.setEquipo2(newTeamName);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            } else {
                                contenidos logged = (contenidos)login.contentUser;
                                deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));

                                if (contentContains(logged, targetCode)){
                                    sportEvent.setEquipo2(newTeamName);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                                }
                            }
                            break;
                        case 8:
                            try {
                                int integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese la cantidad de integrantes que va a incluir en el equipo 1"));
                                
                                while (integrantesASumar <= 0){
                                    integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese una cantidad mayor a 0 de integrantes que va a incluir en el equipo 1"));
                                }
                                
                                if (login.loggedInUserType.equals("admin")){
                                    admin logged = (admin)login.adminUser;
                                    
                                    deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigo(targetCode));
                                    
                                    for (int i = 1; i <= integrantesASumar; i++) {
                                        sportEvent.getIntegrantes1().add(JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i));
                                    }
                                    
                                } else {
                                    contenidos logged = (contenidos)login.contentUser;
                                    
                                    deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigo(targetCode));
                                    
                                    for (int i = 1; i <= integrantesASumar; i++) {
                                        sportEvent.getIntegrantes1().add(JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i));
                                    }
                                    
                                }
                            } catch (Exception e){
                                JOptionPane.showMessageDialog(null, "Ingrese numeros solamente");
                            }
                            break;
                        case 9:
                            try {
                                int integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese la cantidad de integrantes que va a incluir en el equipo 2"));
                                
                                while (integrantesASumar <= 0){
                                    integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese una cantidad mayor a 0 de integrantes que va a incluir en el equipo 2"));
                                }
                                
                                if (login.loggedInUserType.equals("admin")){
                                    admin logged = (admin)login.adminUser;
                                    
                                    deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigo(targetCode));
                                    
                                    for (int i = 1; i <= integrantesASumar; i++) {
                                        sportEvent.getIntegrantes2().add(JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i));
                                    }
                                    
                                    
                                } else {
                                    contenidos logged = (contenidos)login.contentUser;
                                    
                                    deportivo sportEvent = (deportivo)logged.getEventos().get(encontrarPosCodigo(targetCode));
                                    
                                    for (int i = 1; i <= integrantesASumar; i++) {
                                        sportEvent.getIntegrantes2().add(JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i));
                                    }
                                    
                                }
                            } catch (Exception e){
                                JOptionPane.showMessageDialog(null, "Ingrese numeros solamente");
                            }
                            break;
                    }
                    if (opcion != 4){
                        JOptionPane.showMessageDialog(null, "Cambios hechos!");
                    }
    }
    
    public void editarMusical(String targetCode){
        int opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo que desea editar:\n1. Codigo"
                + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                + "\n6. Integrantes"));

        while (opcion < 1 || opcion > 9){
            opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo que desea editar:\n1. Codigo"
                + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                + "\n6. Integrantes"));
        }

        switch (opcion){
            case 1:
                String newCode = JOptionPane.showInputDialog(null, "Ingrese el codigo nuevo del evento");

                if (encontrarCodigo(newCode) == -1){
                    crearEvento.codigosCreados.add(newCode);

                    if (login.loggedInUserType.equals("admin")){

                        admin logged = (admin)login.adminUser;

                        if (adminContains(logged, targetCode)){
                            logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                            crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                        } else {
                            JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                            crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                        }
                    } else {
                        contenidos logged = (contenidos)login.contentUser;

                        if (contentContains(logged, targetCode)){
                            logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                            crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                        } else {
                            JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                            crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El codigo que desea ingrear ya existe\nIntente de nuevo");
                }

                break;
            case 2:
                String newTitle = JOptionPane.showInputDialog(null, "Ingrese el titulo nuevo del evento");

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 3:
                String newDesc = JOptionPane.showInputDialog(null, "Ingrese la descripcion nueva del evento");

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 4:
                fechaNueva calendario = new fechaNueva();
                setVisible(false);
                calendario.setVisible(true);
                calendario.setLocationRelativeTo(null);
                break;
            case 5:
                double newRent = Double.parseDouble(JOptionPane.showInputDialog(null, "Ingrese la renta nueva del evento")) * 1.3;

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 6:
                try {
                    int integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese la cantidad de integrantes que va a sumar a la banda"));

                    while (integrantesASumar <= 0){
                        integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese una cantidad mayor a 0 de integrantes que va a sumar a la banda"));
                    }

                    if (login.loggedInUserType.equals("admin")){
                        admin logged = (admin)login.adminUser;

                        musical musicalEvent = (musical)logged.getEventos().get(encontrarPosCodigo(targetCode));

                        for (int i = 1; i <= integrantesASumar; i++) {
                            String nombreIntegrante = JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i);
                            String instrumento_o_cargo = JOptionPane.showInputDialog("Ingrese el intrumento o cargo del integrante " + i);
                            
                            artista otroArtista = new artista(nombreIntegrante, instrumento_o_cargo);
                            
                            musicalEvent.getIntegrantes().add(otroArtista);
                        }

                    } else {
                        contenidos logged = (contenidos)login.contentUser;

                        musical musicalEvent = (musical)logged.getEventos().get(encontrarPosCodigo(targetCode));

                        for (int i = 1; i <= integrantesASumar; i++) {
                            String nombreIntegrante = JOptionPane.showInputDialog("Ingrese el nombre del integrante " + i);
                            String instrumento_o_cargo = JOptionPane.showInputDialog("Ingrese el intrumento o cargo del integrante " + i);
                            
                            musicalEvent.getIntegrantes().get(i + musicalEvent.getIntegrantes().size() - 1).setNombre(nombreIntegrante);
                            musicalEvent.getIntegrantes().get(i + musicalEvent.getIntegrantes().size() - 1).setCargo_o_instrumento(instrumento_o_cargo);
                        }

                    }
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, "Ingrese numeros solamente");
                }
                break;
        }
        if (opcion != 4){
            JOptionPane.showMessageDialog(null, "Cambios hechos!");
        }
    }
    
    public void editarReligioso(String targetCode){
        int opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo que desea editar:\n1. Codigo"
                + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                + "\n6. Convertidos"));

        while (opcion < 1 || opcion > 9){
            opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el campo que desea editar:\n1. Codigo"
                + "\n2. Titulo\n3. Descripcion\n4. Fecha\n5. Renta"
                + "\n6. Convertidos"));
        }

        switch (opcion){
            case 1:
                String newCode = JOptionPane.showInputDialog(null, "Ingrese el codigo nuevo del evento");

                if (encontrarCodigo(newCode) == -1){
                    crearEvento.codigosCreados.add(newCode);

                    if (login.loggedInUserType.equals("admin")){

                        admin logged = (admin)login.adminUser;

                        if (adminContains(logged, targetCode)){
                            logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                            crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                        } else {
                            JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                            crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                        }
                    } else {
                        contenidos logged = (contenidos)login.contentUser;

                        if (contentContains(logged, targetCode)){
                            logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setCodigo(newCode);
                            crearEvento.codigosCreados.remove(encontrarCodigo(targetCode));
                        } else {
                            JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                            crearEvento.codigosCreados.remove(encontrarCodigo(newCode));
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El codigo que desea ingrear ya existe\nIntente de nuevo");
                }

                break;
            case 2:
                String newTitle = JOptionPane.showInputDialog(null, "Ingrese el titulo nuevo del evento");

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setTitulo(newTitle);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 3:
                String newDesc = JOptionPane.showInputDialog(null, "Ingrese la descripcion nueva del evento");

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setDescripcion(newDesc);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 4:
                fechaNueva calendario = new fechaNueva();
                setVisible(false);
                calendario.setVisible(true);
                calendario.setLocationRelativeTo(null);
                break;
            case 5:
                double newRent = Double.parseDouble(JOptionPane.showInputDialog(null, "Ingrese la renta nueva del evento")) + 2000;

                if (login.loggedInUserType.equals("admin")){

                    admin logged = (admin)login.adminUser;

                    if (adminContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                } else {
                    contenidos logged = (contenidos)login.contentUser;

                    if (contentContains(logged, targetCode)){
                        logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos())).setRenta(newRent);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede editar ese evento ya que usted no lo creo");
                    }
                }
                break;
            case 6:
                try {
                    int integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese la cantidad de convertidos"));

                    while (integrantesASumar <= 0){
                        integrantesASumar = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese una cantidad mayor a 0 de convertidos"));
                    }

                    if (login.loggedInUserType.equals("admin")){
                        admin logged = (admin)login.adminUser;

                        religioso religiousEvent = (religioso)logged.getEventos().get(encontrarPosCodigo(targetCode));

                        for (int i = 1; i <= integrantesASumar; i++) {
                            String nombreIntegrante = JOptionPane.showInputDialog("Ingrese el nombre del convertido " + i);
                            
                            religiousEvent.getConvertidas().add(nombreIntegrante);
                        }

                    } else {
                        contenidos logged = (contenidos)login.contentUser;

                        religioso religiousEvent = (religioso)logged.getEventos().get(encontrarPosCodigo(targetCode));

                        for (int i = 1; i <= integrantesASumar; i++) {
                            String nombreIntegrante = JOptionPane.showInputDialog("Ingrese el nombre del convertido " + i);
                            
                            religiousEvent.getConvertidas().add(nombreIntegrante);
                        }

                    }
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, "Ingrese numeros solamente");
                }
                break;
        }
        if (opcion != 4){
            JOptionPane.showMessageDialog(null, "Cambios hechos!");
        }
    }
    
    static String targetCode;
    
    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        if (login.loggedInUser instanceof limitado){
            JOptionPane.showMessageDialog(null, "No tiene los permisos para editar un evento", "YOU SHALL NOT PASS!!!", JOptionPane.ERROR_MESSAGE);
        } else{
            targetCode = JOptionPane.showInputDialog(null, "Ingrese el codigo del evento que desea editar");
        
            boolean contained = false;
            for (int i = 0; i < crearEvento.codigosCreados.size(); i++) {
                if (crearEvento.codigosCreados.get(i).equals(targetCode)){
                    contained = true;
                }
            }

            if (contained){
                try {
                    if (tipo == 1){
                        editarDeportivo(targetCode);
                    } else if (tipo == 2){
                        editarMusical(targetCode);
                    } else {
                        editarReligioso(targetCode);
                    }

                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, "Ingrese una opcion valida");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El evento que desea editar no existe o no tiene los permisos para editarlo");
            }
        }
    }//GEN-LAST:event_editarActionPerformed

    static ArrayList <evento> cancelados = new ArrayList<>();
    
    private int encontrarCodigo (String code, ArrayList <String> codigosCreados, int pos){
        if (pos > codigosCreados.size() - 1){
            return -1;
        } else if (codigosCreados.get(pos).equals(code)){
            return pos;
        } else {
            return encontrarCodigo(code, codigosCreados, pos + 1);
        }
    }
    
    public int encontrarCodigo(String code){
        return encontrarCodigo(code, crearEvento.codigosCreados, 0);
    }
    
    public boolean adminContains(admin admin, String code){
        for (int i = 0; i < admin.getEventos().size(); i++) {
            if (code.equals(admin.getEventos().get(i).getCodigo())){
                return true;
            }
        }
        
        return false;
    }
    
    public boolean contentContains (contenidos content, String code){
        for (int i = 0; i < content.getEventos().size(); i++) {
            if (code.equals(content.getEventos().get(i).getCodigo())){
                return true;
            }
        }
        
        return false;
    }
    
    public void imprimirArrayList (ArrayList <String> codigos){
        String accum = "";
        for (int i = 0; i < codigos.size(); i++) {
            accum += "<" + codigos.get(i) + ">, ";
        }
        
        JOptionPane.showMessageDialog(null, accum);
    }
    
    public void imprimirArrayListEvents (ArrayList <evento> codigos){
        String accum = "";
        for (int i = 0; i < codigos.size(); i++) {
            accum += "<" + codigos.get(i).getCodigo() + ">, ";
        }
        
        JOptionPane.showMessageDialog(null, accum);
    }
    
    static double multas;
    
    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        if (login.loggedInUser instanceof limitado){
            JOptionPane.showMessageDialog(null, "No tiene los permisos para borrar un evento", "YOU SHALL NOT PASS!!!", JOptionPane.ERROR_MESSAGE);
        } else {
            String codigoABorrar = JOptionPane.showInputDialog("Ingrese el codigo del evento que va a borrar");
        
            evento eventoABorrar = buscarEvento(codigoABorrar);
            if (eventoABorrar == null){

                JOptionPane.showMessageDialog(null, "El evento que ha buscado no existe o usted no posee el permiso de eliminarlo.", ":(", JOptionPane.ERROR_MESSAGE);

            } else {
                Calendar hoy = Calendar.getInstance();
                hoy.add(Calendar.DATE, -1);

                if (eventoABorrar.getFecha().after(hoy)){
                    if (eventoABorrar.getFecha().get(Calendar.DAY_OF_YEAR) - 1 == hoy.get(Calendar.DAY_OF_YEAR) + 1){

                        double cobro;

                        cobro = eventoABorrar.getRenta() / 2;
                        multas += cobro;

                        eventoABorrar.setEstado("Cancelado y Multado");
                        cancelados.add(eventoABorrar);
                        crearEvento.codigosCreados.remove(encontrarCodigo(eventoABorrar.getCodigo()));


                        JOptionPane.showMessageDialog(null, "En vista que el evento se ha cancelado un dia previo a su fecha de calendarizacion, se cobre 50%\nMonto cobrado: " + cobro + "lps");

                    } else {
                        JOptionPane.showMessageDialog(null, "El evento ha sido cancelado.");

                        eventoABorrar.setEstado("Cancelado");
                        cancelados.add(eventoABorrar);

                        crearEvento.codigosCreados.remove(encontrarCodigo(eventoABorrar.getCodigo()));



                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El evento que desea cancelar ya se realizo.");
                }
            }
        }
    }//GEN-LAST:event_borrarActionPerformed

    public usuario buscarPoseedor(String code){
        for (int i = 0; i < login.usuarios.size(); i++) {
            if (login.usuarios.get(i) instanceof admin){
                admin logged = (admin)login.usuarios.get(i);
                if (adminContains(logged, code)){
                    return login.usuarios.get(i);
                }
            } else {
                contenidos logged = (contenidos)login.usuarios.get(i);
                if (contentContains(logged, code)){
                    return login.usuarios.get(i);
                }
            }
        }
        
        return null;
    }
    
    private void verActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verActionPerformed
        String targetCode = JOptionPane.showInputDialog("Ingrese el codigio del evento que desea ver");
        Calendar hoy = Calendar.getInstance();
        
        if (buscarPoseedor(targetCode) == null){
            JOptionPane.showMessageDialog(null, "El evento que desea ver no existe");
        } else {
            
            if (tipo == 1){
                if (buscarPoseedor(targetCode) instanceof admin){
                    admin logged = (admin)buscarPoseedor(targetCode);
                    deportivo evento = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));

                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                } else if (buscarPoseedor(targetCode) instanceof contenidos){
                    contenidos logged = (contenidos)buscarPoseedor(targetCode);
                    deportivo evento = (deportivo)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));
                    
                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                }
            } else if (tipo == 2){
                if (buscarPoseedor(targetCode) instanceof admin){
                    admin logged = (admin)buscarPoseedor(targetCode);
                    musical evento = (musical)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));
                    
                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                } else if (buscarPoseedor(targetCode) instanceof contenidos){
                    contenidos logged = (contenidos)buscarPoseedor(targetCode);
                    musical evento = (musical)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));
                    
                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                }
            } else {
                if (buscarPoseedor(targetCode) instanceof admin){
                    admin logged = (admin)buscarPoseedor(targetCode);
                    religioso evento = (religioso)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));
                    
                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                } else if (buscarPoseedor(targetCode) instanceof contenidos){
                    contenidos logged = (contenidos)buscarPoseedor(targetCode);
                    religioso evento = (religioso)logged.getEventos().get(encontrarPosCodigoEvento(targetCode, logged.getEventos()));
                    
                    JOptionPane.showMessageDialog(null, "Informacion del evento:" + evento.toString());
                }
            }
        }
    }//GEN-LAST:event_verActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrar;
    private javax.swing.JButton crear;
    private javax.swing.JButton editar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton regresar;
    private javax.swing.JButton ver;
    // End of variables declaration//GEN-END:variables
}
