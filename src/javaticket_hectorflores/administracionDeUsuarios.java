/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaticket_hectorflores;

import java.util.ArrayList;
import static javaticket_hectorflores.login.usuarios;
import javax.swing.JOptionPane;

/**
 *
 * @author hecto
 */
public class administracionDeUsuarios extends javax.swing.JFrame {

    /**
     * Creates new form administracionDeUsuarios
     */
    public administracionDeUsuarios() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();
        crear = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Administracion de Usuarios");

        regresar.setText("Regresar a Menu Principal");
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });

        crear.setText("Crear");
        crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        borrar.setText("Borrar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(regresar)
                    .addComponent(borrar)
                    .addComponent(editar)
                    .addComponent(crear)
                    .addComponent(jLabel1))
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(borrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regresar)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        setVisible(false);
        
        menuPrincipal menu = new menuPrincipal();
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
    }//GEN-LAST:event_regresarActionPerformed

    public boolean verificarEdad(String edad){
        boolean valid = true;
        
        if (edad == null || edad.length() == 0){
            valid = false;
        } else if (edad.length() > 3){
            valid = false;
        } else {
            for (int i = 0; i < edad.length(); i++) {
                if ((int)edad.charAt(i) < 48 || (int)edad.charAt(i) > 57){
                    valid = false;
                    break;
                }
            }
        }
        
        return valid;
    }
    
    private void crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearActionPerformed

        String tipoDeUsuario = JOptionPane.showInputDialog("Seleccione el tipo de usuario a crear:\n1. Usuario Administrador\n2. Usuario Administrador de Contenidos\n3. Usuario Limitado");
        
        if (tipoDeUsuario == null){
            tipoDeUsuario = "a";
        }
        
        while (true){
            if (tipoDeUsuario.length() == 1){
                if ((int)tipoDeUsuario.charAt(0) >= 49 && (int)tipoDeUsuario.charAt(0) <= 51){
                    break;
                } else {
                    tipoDeUsuario = JOptionPane.showInputDialog("Seleccione un tipo de usuario a crear valido:\n1. Usuario Administrador\n2. Usuario Administrador de Contenidos\n3. Usuario Limitado");
                    if (tipoDeUsuario == null){
                        tipoDeUsuario = "a";
                    }
                }
            } else {
                tipoDeUsuario = JOptionPane.showInputDialog("Solamente ingrese numeros paea seleccionar el tipo de usuario a crear:\n1. Usuario Administrador\n2. Usuario Administrador de Contenidos\n3. Usuario Limitado");
                if (tipoDeUsuario == null){
                    tipoDeUsuario = "a";
                }
            }
        }
        
        int tipo = (Integer)Integer.parseInt(tipoDeUsuario);
        
        String nombreCompleto = JOptionPane.showInputDialog("Ingrese el nombre completo del usuario:");
        
        while (nombreCompleto == null || nombreCompleto.length() == 0){
            nombreCompleto = JOptionPane.showInputDialog("Ingrese el nombre completo del usuario (al menos un caracter):");
        }
        
        String username = JOptionPane.showInputDialog("Ingrese el nombre de usuario:");
        
        while (username == null || username.length() == 0){
            username = JOptionPane.showInputDialog("Ingrese el nombre de usuario (al menos un caracter):");
        }
        
        if (posUsuario(username) == -1){
            String password = JOptionPane.showInputDialog("Ingrese la contraseña del usuario:");
            
            while (password == null || password.length() == 0){
                password = JOptionPane.showInputDialog("Ingrese una contraseña del usuario (al menos 1 caracter):");
            }
            
            String edad_s = JOptionPane.showInputDialog("Ingrese la edad del usuario:");

            while (verificarEdad(edad_s) == false){
                edad_s = JOptionPane.showInputDialog("Ingrese una edad valida para el usuario:");
            }

            int edad = (Integer)Integer.parseInt(edad_s);
            
            while (edad > 110){
                edad_s = JOptionPane.showInputDialog("Eso es demasiado viejo! Ingrese una edad (110 o menor):");

                while (verificarEdad(edad_s) == false){
                    edad_s = JOptionPane.showInputDialog("Ingrese una edad valida para el usuario:");
                }

                edad = (Integer)Integer.parseInt(edad_s);
            }

            if (tipo == 1){
                admin otroAdmin = new admin (nombreCompleto, username, password, edad);
                (login.usuarios).add(otroAdmin);
                login.admins.add(otroAdmin);
            } else if (tipo == 2){
                contenidos otroContenidos = new contenidos(nombreCompleto, username, password, edad);
                (login.usuarios).add(otroContenidos);
                login.contenidos.add(otroContenidos);
                System.out.println(login.contenidos.size());
            } else {
                limitado otroLimmitado = new limitado(nombreCompleto, username, password, edad);
                (login.usuarios).add(otroLimmitado);
            }

            JOptionPane.showMessageDialog(null, "El usuario ha sido creado con exito!");
        } else {
            JOptionPane.showMessageDialog(null, "El usuario ya existe. Vuelva a intentarlo con un nombre de usuario diferente.");
        }
    }//GEN-LAST:event_crearActionPerformed

    private int posUsuario(ArrayList <usuario> usuarios, String objetivo, int pos){
        if (pos < usuarios.size()){
            if ((usuarios.get(pos).getUsername()).equals(objetivo)){
                return pos;
            } else {
                return posUsuario(usuarios, objetivo, pos + 1);
            }
        } else {
            return -1;
        }
    }
    
    public int posUsuario(String objetivo){
        return posUsuario(login.usuarios, objetivo, 0);
    }
    
    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        String usuarioABorrar = JOptionPane.showInputDialog("Ingrese el nombre de usuario que desea eliminar:\nLogged as: " + login.loggedInUser.getUsername());
        
        while (usuarioABorrar == null || usuarioABorrar.length() == 0){
            usuarioABorrar = JOptionPane.showInputDialog("Ingrese un nombre de usuario que desea eliminar (al menos 1 caracter):");
        }
        
        if (posUsuario(usuarioABorrar) == -1){
            JOptionPane.showMessageDialog(null, "El usuario no esta ingresado en la base de datos.");
        } else if (login.loggedInUser.getUsername().equals(usuarioABorrar)){
            JOptionPane.showMessageDialog(null, "No puede borrar el usuario con el que ha accedido, intente de nuevo");
        } else {
            (login.usuarios).remove(posUsuario(usuarioABorrar));
            JOptionPane.showMessageDialog(null, "El usuario ha sido borrado!");
        }
        
    }//GEN-LAST:event_borrarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        String usuarioAEditar = JOptionPane.showInputDialog("Que usuario desea editar?");
        
        while (usuarioAEditar == null || usuarioAEditar.length() == 0){
            usuarioAEditar = JOptionPane.showInputDialog("Ingrese un nombre  de usuario");
        }
        
        if (posUsuario(usuarioAEditar) == -1){
            JOptionPane.showMessageDialog(null, "El usuario no esta ingresado en la base de datos.");
        } else {
            String atributo = JOptionPane.showInputDialog("Que campo desea editar?\n1. Nombre Completo\n2. Nombre de usuario\n3. Contraseña\n4. Edad");
            
            while (true){
                if ((atributo != null && atributo.length() != 0) || atributo.length() == 1){
                    if ((int)atributo.charAt(0) >= 49 && (int)atributo.charAt(0) <= 52){
                        break;
                    } else {
                        atributo = JOptionPane.showInputDialog("Seleccione un atributo valido:\n1. Nombre Completo\n2. Nombre de usuario\n3. Contraseña\n4. Edad");
                    }
                } else {
                    atributo =  JOptionPane.showInputDialog("Seleccione un atributo valido:\n1. Nombre Completo\n2. Nombre de usuario\n3. Contraseña\n4. Edad");
                }
            }
            
            int campo = (Integer)Integer.parseInt(atributo);
            
            if (campo == 1){
                String nuevoNombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre del usuario");
                ((login.usuarios).get(posUsuario(usuarioAEditar))).setNombreCompleto(nuevoNombre);
                JOptionPane.showMessageDialog(null, "El nombre completo del usuario ha sido cambiado con exito!");
                
            } else if (campo == 2){
                String nuevoUsername = JOptionPane.showInputDialog("Ingrese el nuevo username");
                
                while (posUsuario(nuevoUsername) != -1){
                    nuevoUsername = JOptionPane.showInputDialog("Ese username ya existe, ingrese uno nuevo.");
                }
                
                ((login.usuarios).get(posUsuario(usuarioAEditar))).setUsername(nuevoUsername);
                JOptionPane.showMessageDialog(null, "El username del usuario ha sido cambiado con exito!");
                
            } else if (campo == 3){
                String nuevaContra = JOptionPane.showInputDialog("Ingrese la nueva contraseña");
                ((login.usuarios).get(posUsuario(usuarioAEditar))).setPassword(nuevaContra);
                JOptionPane.showMessageDialog(null, "La contraseña del usuario ha sido cambiada con exito!");
            } else {
                String nuevaEdad_s = JOptionPane.showInputDialog("Ingrese la nueva edad");
                
                verificarEdad(nuevaEdad_s);

                int nuevaEdad = (Integer)Integer.parseInt(nuevaEdad_s);
                
                while (nuevaEdad > 110){
                   nuevaEdad_s = JOptionPane.showInputDialog("Eso es demasiado viejo! Ingrese una edad (110 o menor):");

                    while (verificarEdad(nuevaEdad_s) == false){
                        nuevaEdad_s = JOptionPane.showInputDialog("Ingrese una edad valida para el usuario:");
                    }

                    nuevaEdad = (Integer)Integer.parseInt(nuevaEdad_s);
                }
                
                ((login.usuarios).get(posUsuario(usuarioAEditar))).setEdad(nuevaEdad);
                JOptionPane.showMessageDialog(null, "La edad del usuario ha sido cambiada con exito!");
            }
        }
    }//GEN-LAST:event_editarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrar;
    private javax.swing.JButton crear;
    private javax.swing.JButton editar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton regresar;
    // End of variables declaration//GEN-END:variables
}
